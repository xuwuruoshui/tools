package handler

import (
	"end/model"
	"end/service"
	"github.com/gin-gonic/gin"
	"strconv"
	"time"
)

type {{ .MethodName }}Handler struct {
	{{ .MethodName }}Service    service.{{ .MethodName }}ServiceImpl
	contextTimeout time.Duration
}


func (h *{{ .MethodName }}Handler) Get{{ .MethodName }}(c *gin.Context) any{

	id := c.Param("id")
	return ApiResp2(h.{{ .MethodName }}Service.Get{{ .MethodName }}ById(c,id))
}

func (h *{{ .MethodName }}Handler) Get{{ .MethodName }}List(c *gin.Context) any{

	pageSizeStr := c.Query("pageSize")
	pageNoStr := c.Query("pageNo")

	pageSize, _ := strconv.Atoi(pageSizeStr)
	pageNo, _ := strconv.Atoi(pageNoStr)

	var {{ .ValName }} model.{{ .MethodName }}
	err := c.ShouldBindQuery(&{{ .ValName }})
	if err != nil {
		return ApiResp(UNKNOWN,err)
	}

	return ApiResp2(h.{{ .MethodName }}Service.Get{{ .MethodName }}List(c, model.PageDomain[model.{{ .MethodName }}]{
		PageSize: pageSize,
		PageNo: pageNo,
		Condition: &{{ .ValName }},
	}))
}

func (h *{{ .MethodName }}Handler) Create{{ .MethodName }}(c *gin.Context) any{

	var {{ .ValName }} model.{{ .MethodName }}
	err := c.ShouldBindJSON(&{{ .ValName }})
	if err != nil {
		return ApiResp(UNKNOWN,err)
	}
	return ApiResp2(h.{{ .MethodName }}Service.Insert{{ .MethodName }}(c,{{ .ValName }}))
}

func (h *{{ .MethodName }}Handler) Update{{ .MethodName }}(c *gin.Context) any{

	var {{ .ValName }} model.{{ .MethodName }}
	err := c.ShouldBindJSON(&{{ .ValName }})
	if err!=nil{
		return ApiResp(UNKNOWN,err)
	}
	return ApiResp2(h.{{ .MethodName }}Service.Update{{ .MethodName }}(c,{{ .ValName }}))
}

func (h *{{ .MethodName }}Handler) Delete{{ .MethodName }}(c *gin.Context) any{

	ids := c.Param("ids")
	return ApiResp2(h.{{ .MethodName }}Service.Delete{{ .MethodName }}(c,ids))
}