package service

import (
	"context"
	"end/model"
	"end/repository"
	"time"
)


type {{ .MethodName }}Service interface {
	Get{{ .MethodName }}ById(context.Context, string) *ServiceResData
	Get{{ .MethodName }}AllList(context.Context, model.PageDomain[model.{{ .MethodName }}]) *ServiceResData
	Insert{{ .MethodName }}(context.Context, model.{{ .MethodName }}) *ServiceResData
	Update{{ .MethodName }}(context.Context, model.{{ .MethodName }}) *ServiceResData
	Delete{{ .MethodName }}(context.Context, string) *ServiceResData
	Get{{ .MethodName }}List(context.Context, model.PageDomain[model.{{ .MethodName }}])*ServiceResData
}

type {{ .MethodName }}ServiceImpl struct {
	{{ .ValName }}Repository repository.{{ .MethodName }}Repository[model.{{ .MethodName }}]
	contextTimeout time.Duration
}

func New{{ .MethodName }}Service({{ .ValName }}epository repository.{{ .MethodName }}Repository[model.{{ .MethodName }}], tm time.Duration) {{ .MethodName }}ServiceImpl {
	return {{ .MethodName }}ServiceImpl{
		{{ .ValName }}Repository: {{ .ValName }}epository,
		contextTimeout: tm,
	}
}


func (u *{{ .MethodName }}ServiceImpl) Get{{ .MethodName }}ById(c context.Context, id string) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()
	return ServiceResp2(u.{{ .ValName }}Repository.GetById(ctx, id))
}

func (u *{{ .MethodName }}ServiceImpl) Get{{ .MethodName }}AllList(c context.Context, condition model.PageDomain[model.{{ .MethodName }}]) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()
	return ServiceResp2(u.{{ .ValName }}Repository.GetAllList(ctx, condition))
}

func (u *{{ .MethodName }}ServiceImpl) Insert{{ .MethodName }}(c context.Context, {{ .ValName }} model.{{ .MethodName }}) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()
	return ServiceResp2(u.{{ .ValName }}Repository.Insert(ctx, {{ .ValName }}))
}

func (u *{{ .MethodName }}ServiceImpl) Update{{ .MethodName }}(c context.Context, {{ .ValName }} model.{{ .MethodName }}) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()

	return ServiceResp2(u.{{ .ValName }}Repository.Update(ctx, {{ .ValName }}))
}

func (u *{{ .MethodName }}ServiceImpl) Delete{{ .MethodName }}(c context.Context, id string) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()
	return ServiceResp2(u.{{ .ValName }}Repository.Delete(ctx, id))
}

func (u *{{ .MethodName }}ServiceImpl) Get{{ .MethodName }}List(c context.Context, condition model.PageDomain[model.{{ .MethodName }}]) *ServiceResData {
	ctx, cancel := context.WithTimeout(c, u.contextTimeout)
	defer cancel()
	return ServiceResp2(u.{{ .ValName }}Repository.GetList(ctx, condition))
}
